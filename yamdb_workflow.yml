name: Django-app workflow

on: [push]

jobs:
    tests:
        runs-on: ubuntu-latest
        steps:
        - uses: actions/checkout@v3
        - name: Set up Pyrhon
          uses: actions/setup-python@v3
          with:
            python-version: 3.7  
            
        - name: Install dependencies
          run: |
            python -m pip install --upgrade pip
            pip install flake8 pep8-naming flake8-broken-line flake8-return flake8-isort
            pip install -r api_yamdb/requirements.txt

        - name: Test with flake8 and django tests
          run:  |
            python -m flake8
            # pytest

    build_and_push_to_docker_hub:
      name: Push Docker image to Docker Hub
      runs-on: ubuntu-latest
      needs: tests
      steps:
        - name: Check out the repo
          uses: actions/checkout@v3

        - name: Set up Docker Buildx
          uses: docker/setup-buildx-action@v1

        - name: Login to Docker
          uses: docker/login-action@v1
          with:
            username: ${{secrets.DOCKER_USERNAME}} 
            password: ${{secrets.DOCKER_PASSWORD}}

        - name: Push to Docker Hub
          uses: docker/build-push-action@v2
          with:
            context: ./api_yamdb
            push: true
            tags: gruand69/api_yamdb_old:latest
    
    deploy:
      runs-on: ubuntu-latest
      needs: build_and_push_to_docker_hub
      steps:
        - name: executing remote ssh command to deploy
          uses: appleboy/ssh-action@master
          with:
            host: ${{ secrets.HOST }}
            username: ${{ secrets.USER }}
            key: ${{ secrets.SSH_KEY }}
            script:  |
              sudo docker pull gruand69/api_yamdm:latest
              sudo docker-compose stop
              sudo docker-compose rm -f web
              touch .env
              echo DB_ENGINE=${{ secrets.DB_ENGINE }}
              echo DB_NAME=${{ secrets.DB_NAME }}
              echo POSTGRES_USER=${{ secrets.POSTGRES_USER }}
              echo POSTGRES_PASSWORD=${{ secrets.POSTGRES_PASSWORD }}
              echo DB_HOST=${{ secrets.DB_HOST }}
              echo DB_PORT=${{ secrets.DB_PORT }}
              sudo docker compose up -d
              sudo docker compose exec -T web python manage.py collectstatic --no-input
